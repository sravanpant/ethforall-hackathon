// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package orderbook

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OrderbookMetaData contains all meta data concerning the Orderbook contract.
var OrderbookMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_oraclesIP\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"askId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"askAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"askSize\",\"type\":\"uint256\"}],\"name\":\"NewAskEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidSize\",\"type\":\"uint256\"}],\"name\":\"NewBidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"orderId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"askId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataCID\",\"type\":\"string\"}],\"name\":\"orderCreatedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_target\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_askAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_askSize\",\"type\":\"uint256\"}],\"name\":\"addAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidSize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dataCID\",\"type\":\"string\"}],\"name\":\"addBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_orderId\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_actorId\",\"type\":\"uint64\"}],\"name\":\"askBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracles\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_orderId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_askId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountFixed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeFixed\",\"type\":\"uint256\"}],\"name\":\"proveOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_oracleIP\",\"type\":\"string\"}],\"name\":\"registerOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052600060065560006007553480156200001b57600080fd5b5060405162003eba38038062003eba833981810160405281019062000041919062000602565b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600490805190602001906200009a929190620000bc565b508060059080519060200190620000b39291906200014b565b505050620009b9565b82805482825590600052602060002090810192821562000138579160200282015b82811115620001375782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620000dd565b5b509050620001479190620001ab565b5090565b82805482825590600052602060002090810192821562000198579160200282015b8281111562000197578251829081620001869190620008d2565b50916020019190600101906200016c565b5b509050620001a79190620001ca565b5090565b5b80821115620001c6576000816000905550600101620001ac565b5090565b5b80821115620001ee5760008181620001e49190620001f2565b50600101620001cb565b5090565b5080546200020090620006c1565b6000825580601f1062000214575062000235565b601f016020900490600052602060002090810190620002349190620001ab565b5b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200029c8262000251565b810181811067ffffffffffffffff82111715620002be57620002bd62000262565b5b80604052505050565b6000620002d362000238565b9050620002e1828262000291565b919050565b600067ffffffffffffffff82111562000304576200030362000262565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000347826200031a565b9050919050565b62000359816200033a565b81146200036557600080fd5b50565b60008151905062000379816200034e565b92915050565b6000620003966200039084620002e6565b620002c7565b90508083825260208201905060208402830185811115620003bc57620003bb62000315565b5b835b81811015620003e95780620003d4888262000368565b845260208401935050602081019050620003be565b5050509392505050565b600082601f8301126200040b576200040a6200024c565b5b81516200041d8482602086016200037f565b91505092915050565b600067ffffffffffffffff82111562000444576200044362000262565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff82111562000478576200047762000262565b5b620004838262000251565b9050602081019050919050565b60005b83811015620004b057808201518184015260208101905062000493565b60008484015250505050565b6000620004d3620004cd846200045a565b620002c7565b905082815260208101848484011115620004f257620004f162000455565b5b620004ff84828562000490565b509392505050565b600082601f8301126200051f576200051e6200024c565b5b815162000531848260208601620004bc565b91505092915050565b6000620005516200054b8462000426565b620002c7565b9050808382526020820190506020840283018581111562000577576200057662000315565b5b835b81811015620005c557805167ffffffffffffffff811115620005a0576200059f6200024c565b5b808601620005af898262000507565b8552602085019450505060208101905062000579565b5050509392505050565b600082601f830112620005e757620005e66200024c565b5b8151620005f98482602086016200053a565b91505092915050565b600080604083850312156200061c576200061b62000242565b5b600083015167ffffffffffffffff8111156200063d576200063c62000247565b5b6200064b85828601620003f3565b925050602083015167ffffffffffffffff8111156200066f576200066e62000247565b5b6200067d85828601620005cf565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620006da57607f821691505b602082108103620006f057620006ef62000692565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200075a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200071b565b6200076686836200071b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620007b3620007ad620007a7846200077e565b62000788565b6200077e565b9050919050565b6000819050919050565b620007cf8362000792565b620007e7620007de82620007ba565b84845462000728565b825550505050565b600090565b620007fe620007ef565b6200080b818484620007c4565b505050565b5b81811015620008335762000827600082620007f4565b60018101905062000811565b5050565b601f82111562000882576200084c81620006f6565b62000857846200070b565b8101602085101562000867578190505b6200087f62000876856200070b565b83018262000810565b50505b505050565b600082821c905092915050565b6000620008a76000198460080262000887565b1980831691505092915050565b6000620008c2838362000894565b9150826002028217905092915050565b620008dd8262000687565b67ffffffffffffffff811115620008f957620008f862000262565b5b620009058254620006c1565b6200091282828562000837565b600060209050601f8311600181146200094a576000841562000935578287015190505b620009418582620008b4565b865550620009b1565b601f1984166200095a86620006f6565b60005b8281101562000984578489015182556001820191506020850194506020810190506200095d565b86831015620009a45784890151620009a0601f89168262000894565b8355505b6001600288020188555050505b505050505050565b6134f180620009c96000396000f3fe6080604052600436106100555760003560e01c806302c147391461005a57806330df4b8c1461008357806340884c521461009f5780635da6d08c146100cb5780637e1b720d146100f4578063aa9f3d741461011d575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190611fce565b610146565b005b61009d60048036038101906100989190612164565b61079a565b005b3480156100ab57600080fd5b506100b4610944565b6040516100c29291906123e6565b60405180910390f35b3480156100d757600080fd5b506100f260048036038101906100ed919061241d565b610aae565b005b34801561010057600080fd5b5061011b60048036038101906101169190612479565b610bda565b005b34801561012957600080fd5b50610144600480360381019061013f9190612528565b610d3d565b005b6000805b6004805490508110156101ee576004818154811061016b5761016a612584565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036101db5781806101d3906125e2565b9250506101ee565b80806101e6906125e2565b91505061014a565b5060018114610232576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610229906126ad565b60405180910390fd5b60006002876040516102449190612714565b908152602001604051809103902060040154146104435760028660405161026b9190612714565b9081526020016040518091039020600701600081548092919061028d906125e2565b919050555060026004805490506102a4919061275a565b6002876040516102b49190612714565b9081526020016040518091039020600701541180156103055750600015156002876040516102e29190612714565b908152602001604051809103902060080160009054906101000a900460ff161515145b1561043e57600160028760405161031c9190612714565b908152602001604051809103902060080160006101000a81548160ff0219169083151502179055507f86e6d0e88a5f307fadca96a6dc3f153a03dbb6f7b7ae260489df2efd95a7a33e868660008089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600754600160008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000808c815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000808d815260200190815260200160002060050160405161043597969594939291906128ec565b60405180910390a15b610792565b604051806101400160405280878152602001600080888152602001908152602001600020600501805461047590612822565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190612822565b80156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b5050505050815260200160008088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200160008088815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600181526020016000151581526020016000151581525060028760405161061f9190612714565b908152602001604051809103902060008201518160000190816106429190612b15565b5060208201518160010190816106589190612c2d565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e082015181600701556101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff0219169083151502179055509050505b505050505050565b823410156107a757600080fd5b6040518060c0016040528060065481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018281525060008060065481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190816108d79190612c2d565b50905050600660008154809291906108ee906125e2565b91905055507f993273aba8f3ffa2f322e415e681892c5b94cdf8567fcf1f0ebe13dc28fa655a60016006546109239190612cff565b3385856040516109369493929190612d33565b60405180910390a150505050565b60608060046005818054806020026020016040519081016040528092919081815260200182805480156109cc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610982575b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015610aa0578382906000526020600020018054610a1390612822565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3f90612822565b8015610a8c5780601f10610a6157610100808354040283529160200191610a8c565b820191906000526020600020905b815481529060010190602001808311610a6f57829003601f168201915b5050505050815260200190600101906109f4565b505050509050915091509091565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3590612dea565b60405180910390fd5b6004829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600581908060018154018082558091505060019003906000526020600020016000909190919091509081610bd59190612c2d565b505050565b33604051602001610beb9190612e52565b60405160208183030381529060405280519060200120610c0a84610e9d565b600001518051906020012014610c1f57600080fd5b604051806080016040528060075481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152506001600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015590505060076000815480929190610ce8906125e2565b91905055507f97cc68268dcbbd8d53f0ef5540d61904086eb90a195b0ae7605e7440c4c300086001600754610d1d9190612cff565b338484604051610d309493929190612d33565b60405180910390a1505050565b60011515600283604051610d519190612714565b908152602001604051809103902060080160009054906101000a900460ff16151514610d7c57600080fd5b60001515600283604051610d909190612714565b908152602001604051809103902060080160019054906101000a900460ff16151514610dbb57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600283604051610de29190612714565b908152602001604051809103902060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e3457600080fd5b6001600283604051610e469190612714565b908152602001604051809103902060080160016101000a81548160ff021916908315150217905550610e9981600284604051610e829190612714565b908152602001604051809103902060040154610f2e565b5050565b610ea5611e24565b60008067ffffffffffffffff811115610ec157610ec0611e6d565b5b6040519080825280601f01601f191660200182016040528015610ef35781602001600182028036833780820191505090505b5090506000610f0c63c33a1cc685846000346001610f5f565b90506000610f1982611266565b9050610f24816113ee565b9350505050919050565b600060405180602001604052806000815250905060609050610f5660008360008085886114dd565b50505050505050565b6060600060f81b86600081518110610f7a57610f79612584565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610ff65750600160f81b86600081518110610fc757610fc6612584565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110445750600260f81b8660008151811061101557611014612584565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110925750600360f81b8660008151811061106357611062612584565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110e05750600460f81b866000815181106110b1576110b0612584565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61111f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111690612edf565b60405180910390fd5b60008073fe0000000000000000000000000000000000000373ffffffffffffffffffffffffffffffffffffffff1689868661115b57600061115e565b60015b898b8d60405160200161117696959493929190612f0e565b6040516020818303038152906040526040516111929190612714565b600060405180830381855af49150503d80600081146111cd576040519150601f19603f3d011682016040523d82523d6000602084013e6111d2565b606091505b509150915060011515821515146040518060400160405280601181526020017f6163746f722063616c6c206661696c656400000000000000000000000000000081525090611256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124d9190612fb6565b60405180910390fd5b5080925050509695505050505050565b60606000806000848060200190518101906112819190613093565b925092509250600067ffffffffffffffff168267ffffffffffffffff16036112ec5760008151146112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de9061314e565b60405180910390fd5b611394565b607167ffffffffffffffff168267ffffffffffffffff160361135157600081511161134c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611343906131e0565b60405180910390fd5b611393565b6000611392576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113899061324c565b60405180910390fd5b5b5b600083146113a1846115cb565b906113e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d99190612fb6565b60405180910390fd5b50809350505050919050565b6113f6611e24565b60008061140c828561163b90919063ffffffff16565b8093508192505050600281146114255761142461326c565b5b611438828561168a90919063ffffffff16565b846000018194508290525050611457828561183490919063ffffffff16565b61147f5761146e828561168a90919063ffffffff16565b8460200181945082905250506114d6565b600067ffffffffffffffff81111561149a57611499611e6d565b5b6040519080825280601f01601f1916602001820160405280156114cc5781602001600182028036833780820191505090505b5083602001819052505b5050919050565b6000806000606060008073fe0000000000000000000000000000000000000573ffffffffffffffffffffffffffffffffffffffff168c8c8c8c8c8c60405160200161152d9695949392919061329b565b6040516020818303038152906040526040516115499190612714565b600060405180830381855af49150503d8060008114611584576040519150601f19603f3d011682016040523d82523d6000602084013e611589565b606091505b50915091506000806000838060200190518101906115a79190613093565b92509250925084838383985098509850985050505050509650965096509692505050565b6060600082121561160b576115e76115e2836118a0565b6118bc565b6040516020016115f7919061338b565b604051602081830303815290604052611634565b611614826118bc565b60405160200161162491906133f9565b6040516020818303038152906040525b9050919050565b60008060008061164b868661198a565b8167ffffffffffffffff169150809750819350829450505050600460ff168260ff161461167b5761167a61326c565b5b80859350935050509250929050565b6060600080600061169b868661198a565b8167ffffffffffffffff169150809750819350829450505050600660ff168260ff1614806116cf5750600260ff168260ff16145b6116dc576116db61326c565b5b600660ff168260ff1603611725576116f4868661198a565b8167ffffffffffffffff169150809750819350829450505050600260ff168260ff16146117245761172361326c565b5b5b60008186611733919061341b565b905060008267ffffffffffffffff81111561175157611750611e6d565b5b6040519080825280601f01601f1916602001820160405280156117835781602001600182028036833780820191505090505b5090506000808890505b83811015611816578981815181106117a8576117a7612584565b5b602001015160f81c60f81b8383815181106117c6576117c5612584565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180611800906125e2565b925050808061180e906125e2565b91505061178d565b50818489611824919061341b565b9650965050505050509250929050565b60007ff60000000000000000000000000000000000000000000000000000000000000083838151811061186a57611869612584565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614905092915050565b6000808212156118b357816000036118b5565b815b9050919050565b6060600060016118cb84611b18565b01905060008167ffffffffffffffff8111156118ea576118e9611e6d565b5b6040519080825280601f01601f19166020018201604052801561191c5781602001600182028036833780820191505090505b509050600082602001820190505b60011561197f578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816119735761197261272b565b5b0494506000850361192a575b819350505050919050565b60008060008061199a8686611c6b565b90506001856119a9919061341b565b94506000600560e0831660ff16901c90506000601f83169050601c8160ff16106119d6576119d561326c565b5b60188160ff1610156119f9578181888160ff169150955095509550505050611b11565b60188160ff1603611a4e576000611a108989611c6b565b9050600188611a1f919061341b565b975060188160ff161015611a3657611a3561326c565b5b8281898160ff16915096509650965050505050611b11565b60198160ff1603611a8f576000611a658989611ce6565b9050600288611a74919061341b565b97508281898161ffff16915096509650965050505050611b11565b601a8160ff1603611ad2576000611aa68989611d50565b9050600488611ab5919061341b565b97508281898163ffffffff16915096509650965050505050611b11565b601b8160ff1614611ae657611ae561326c565b5b6000611af28989611dba565b9050600888611b01919061341b565b9750828189965096509650505050505b9250925092565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611b76577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611b6c57611b6b61272b565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611bb3576d04ee2d6d415b85acef81000000008381611ba957611ba861272b565b5b0492506020810190505b662386f26fc100008310611be257662386f26fc100008381611bd857611bd761272b565b5b0492506010810190505b6305f5e1008310611c0b576305f5e1008381611c0157611c0061272b565b5b0492506008810190505b6127108310611c30576127108381611c2657611c2561272b565b5b0492506004810190505b60648310611c535760648381611c4957611c4861272b565b5b0492506002810190505b600a8310611c62576001810190505b80915050919050565b6000600182611c7a919061341b565b83511015611cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb49061349b565b60405180910390fd5b828281518110611cd057611ccf612584565b5b602001015160f81c60f81b60f81c905092915050565b6000600282611cf5919061341b565b83511015611d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2f9061349b565b60405180910390fd5b60008260200184015190508060f01c91505092915050565b6000600482611d5f919061341b565b83511015611da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d999061349b565b60405180910390fd5b60008260200184015190508060e01c91505092915050565b6000600882611dc9919061341b565b83511015611e0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e039061349b565b60405180910390fd5b60008260200184015190508060c01c91505092915050565b604051806040016040528060608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ea582611e5c565b810181811067ffffffffffffffff82111715611ec457611ec3611e6d565b5b80604052505050565b6000611ed7611e3e565b9050611ee38282611e9c565b919050565b600067ffffffffffffffff821115611f0357611f02611e6d565b5b611f0c82611e5c565b9050602081019050919050565b82818337600083830152505050565b6000611f3b611f3684611ee8565b611ecd565b905082815260208101848484011115611f5757611f56611e57565b5b611f62848285611f19565b509392505050565b600082601f830112611f7f57611f7e611e52565b5b8135611f8f848260208601611f28565b91505092915050565b6000819050919050565b611fab81611f98565b8114611fb657600080fd5b50565b600081359050611fc881611fa2565b92915050565b600080600080600060a08688031215611fea57611fe9611e48565b5b600086013567ffffffffffffffff81111561200857612007611e4d565b5b61201488828901611f6a565b955050602061202588828901611fb9565b945050604061203688828901611fb9565b935050606061204788828901611fb9565b925050608061205888828901611fb9565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061209082612065565b9050919050565b6120a081612085565b81146120ab57600080fd5b50565b6000813590506120bd81612097565b92915050565b600067ffffffffffffffff8211156120de576120dd611e6d565b5b6120e782611e5c565b9050602081019050919050565b6000612107612102846120c3565b611ecd565b90508281526020810184848401111561212357612122611e57565b5b61212e848285611f19565b509392505050565b600082601f83011261214b5761214a611e52565b5b813561215b8482602086016120f4565b91505092915050565b6000806000806080858703121561217e5761217d611e48565b5b600061218c878288016120ae565b945050602061219d87828801611fb9565b93505060406121ae87828801611fb9565b925050606085013567ffffffffffffffff8111156121cf576121ce611e4d565b5b6121db87828801612136565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61221c81612085565b82525050565b600061222e8383612213565b60208301905092915050565b6000602082019050919050565b6000612252826121e7565b61225c81856121f2565b935061226783612203565b8060005b8381101561229857815161227f8882612222565b975061228a8361223a565b92505060018101905061226b565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561230b5780820151818401526020810190506122f0565b60008484015250505050565b6000612322826122d1565b61232c81856122dc565b935061233c8185602086016122ed565b61234581611e5c565b840191505092915050565b600061235c8383612317565b905092915050565b6000602082019050919050565b600061237c826122a5565b61238681856122b0565b935083602082028501612398856122c1565b8060005b858110156123d457848403895281516123b58582612350565b94506123c083612364565b925060208a0199505060018101905061239c565b50829750879550505050505092915050565b600060408201905081810360008301526124008185612247565b905081810360208301526124148184612371565b90509392505050565b6000806040838503121561243457612433611e48565b5b6000612442858286016120ae565b925050602083013567ffffffffffffffff81111561246357612462611e4d565b5b61246f85828601612136565b9150509250929050565b60008060006060848603121561249257612491611e48565b5b600084013567ffffffffffffffff8111156124b0576124af611e4d565b5b6124bc86828701611f6a565b93505060206124cd86828701611fb9565b92505060406124de86828701611fb9565b9150509250925092565b600067ffffffffffffffff82169050919050565b612505816124e8565b811461251057600080fd5b50565b600081359050612522816124fc565b92915050565b6000806040838503121561253f5761253e611e48565b5b600083013567ffffffffffffffff81111561255d5761255c611e4d565b5b61256985828601611f6a565b925050602061257a85828601612513565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125ed82611f98565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361261f5761261e6125b3565b5b600182019050919050565b600082825260208201905092915050565b7f4f7261636c65732063616e206f6e6c792063616c6c20746869732066756e637460008201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b600061269760238361262a565b91506126a28261263b565b604082019050919050565b600060208201905081810360008301526126c68161268a565b9050919050565b600081519050919050565b600081905092915050565b60006126ee826126cd565b6126f881856126d8565b93506127088185602086016122ed565b80840191505092915050565b600061272082846126e3565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061276582611f98565b915061277083611f98565b9250826127805761277f61272b565b5b828204905092915050565b600082825260208201905092915050565b60006127a7826126cd565b6127b1818561278b565b93506127c18185602086016122ed565b6127ca81611e5c565b840191505092915050565b6127de81611f98565b82525050565b6127ed81612085565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061283a57607f821691505b60208210810361284d5761284c6127f3565b5b50919050565b60008190508160005260206000209050919050565b6000815461287581612822565b61287f818661262a565b9450600182166000811461289a57600181146128b0576128e3565b60ff1983168652811515602002860193506128e3565b6128b985612853565b60005b838110156128db578154818901526001820191506020810190506128bc565b808801955050505b50505092915050565b600060e0820190508181036000830152612906818a61279c565b905061291560208301896127d5565b61292260408301886127e4565b61292f60608301876127d5565b61293c60808301866127e4565b61294960a08301856127e4565b81810360c083015261295b8184612868565b905098975050505050505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026129cb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261298e565b6129d5868361298e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612a12612a0d612a0884611f98565b6129ed565b611f98565b9050919050565b6000819050919050565b612a2c836129f7565b612a40612a3882612a19565b84845461299b565b825550505050565b600090565b612a55612a48565b612a60818484612a23565b505050565b5b81811015612a8457612a79600082612a4d565b600181019050612a66565b5050565b601f821115612ac957612a9a81612969565b612aa38461297e565b81016020851015612ab2578190505b612ac6612abe8561297e565b830182612a65565b50505b505050565b600082821c905092915050565b6000612aec60001984600802612ace565b1980831691505092915050565b6000612b058383612adb565b9150826002028217905092915050565b612b1e826126cd565b67ffffffffffffffff811115612b3757612b36611e6d565b5b612b418254612822565b612b4c828285612a88565b600060209050601f831160018114612b7f5760008415612b6d578287015190505b612b778582612af9565b865550612bdf565b601f198416612b8d86612969565b60005b82811015612bb557848901518255600182019150602085019450602081019050612b90565b86831015612bd25784890151612bce601f891682612adb565b8355505b6001600288020188555050505b505050505050565b601f821115612c2857612bf981612853565b612c028461297e565b81016020851015612c11578190505b612c25612c1d8561297e565b830182612a65565b50505b505050565b612c36826122d1565b67ffffffffffffffff811115612c4f57612c4e611e6d565b5b612c598254612822565b612c64828285612be7565b600060209050601f831160018114612c975760008415612c85578287015190505b612c8f8582612af9565b865550612cf7565b601f198416612ca586612853565b60005b82811015612ccd57848901518255600182019150602085019450602081019050612ca8565b86831015612cea5784890151612ce6601f891682612adb565b8355505b6001600288020188555050505b505050505050565b6000612d0a82611f98565b9150612d1583611f98565b9250828203905081811115612d2d57612d2c6125b3565b5b92915050565b6000608082019050612d4860008301876127d5565b612d5560208301866127e4565b612d6260408301856127d5565b612d6f60608301846127d5565b95945050505050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000612dd460218361262a565b9150612ddf82612d78565b604082019050919050565b60006020820190508181036000830152612e0381612dc7565b9050919050565b60008160601b9050919050565b6000612e2282612e0a565b9050919050565b6000612e3482612e17565b9050919050565b612e4c612e4782612085565b612e29565b82525050565b6000612e5e8284612e3b565b60148201915081905092915050565b7f6163746f725f6164647265737320616464726573732073686f756c642062652060008201527f627974657320666f726d61740000000000000000000000000000000000000000602082015250565b6000612ec9602c8361262a565b9150612ed482612e6d565b604082019050919050565b60006020820190508181036000830152612ef881612ebc565b9050919050565b612f08816124e8565b82525050565b600060c082019050612f236000830189612eff565b612f3060208301886127d5565b612f3d6040830187612eff565b612f4a6060830186612eff565b8181036080830152612f5c818561279c565b905081810360a0830152612f70818461279c565b9050979650505050505050565b6000612f88826122d1565b612f92818561262a565b9350612fa28185602086016122ed565b612fab81611e5c565b840191505092915050565b60006020820190508181036000830152612fd08184612f7d565b905092915050565b6000819050919050565b612feb81612fd8565b8114612ff657600080fd5b50565b60008151905061300881612fe2565b92915050565b60008151905061301d816124fc565b92915050565b600061303661303184611ee8565b611ecd565b90508281526020810184848401111561305257613051611e57565b5b61305d8482856122ed565b509392505050565b600082601f83011261307a57613079611e52565b5b815161308a848260208601613023565b91505092915050565b6000806000606084860312156130ac576130ab611e48565b5b60006130ba86828701612ff9565b93505060206130cb8682870161300e565b925050604084015167ffffffffffffffff8111156130ec576130eb611e4d565b5b6130f886828701613065565b9150509250925092565b7f726573706f6e7365206c656e6774682073686f756c6420626520300000000000600082015250565b6000613138601b8361262a565b915061314382613102565b602082019050919050565b600060208201905081810360008301526131678161312b565b9050919050565b7f726573706f6e7365206c656e6774682073686f756c642067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b60006131ca60258361262a565b91506131d58261316e565b604082019050919050565b600060208201905081810360008301526131f9816131bd565b9050919050565b7f696e76616c696420726573706f736e6520636f64656300000000000000000000600082015250565b600061323660168361262a565b915061324182613200565b602082019050919050565b6000602082019050818103600083015261326581613229565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600060c0820190506132b06000830189612eff565b6132bd60208301886127d5565b6132ca6040830187612eff565b6132d76060830186612eff565b81810360808301526132e9818561279c565b90506132f860a0830184612eff565b979650505050505050565b600081905092915050565b7f6163746f72206572726f7220636f6465202d0000000000000000000000000000600082015250565b6000613344601283613303565b915061334f8261330e565b601282019050919050565b6000613365826122d1565b61336f8185613303565b935061337f8185602086016122ed565b80840191505092915050565b600061339682613337565b91506133a2828461335a565b915081905092915050565b7f6163746f72206572726f7220636f646520000000000000000000000000000000600082015250565b60006133e3601183613303565b91506133ee826133ad565b601182019050919050565b6000613404826133d6565b9150613410828461335a565b915081905092915050565b600061342682611f98565b915061343183611f98565b9250828201905080821115613449576134486125b3565b5b92915050565b7f736c6963696e67206f7574206f662072616e6765000000000000000000000000600082015250565b600061348560148361262a565b91506134908261344f565b602082019050919050565b600060208201905081810360008301526134b481613478565b905091905056fea264697066735822122000dded5c959d26f15c56e6e58557fe48a269a97568aa1131b13fa8e5b086f5d664736f6c63430008120033",
}

// OrderbookABI is the input ABI used to generate the binding from.
// Deprecated: Use OrderbookMetaData.ABI instead.
var OrderbookABI = OrderbookMetaData.ABI

// OrderbookBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OrderbookMetaData.Bin instead.
var OrderbookBin = OrderbookMetaData.Bin

// DeployOrderbook deploys a new Ethereum contract, binding an instance of Orderbook to it.
func DeployOrderbook(auth *bind.TransactOpts, backend bind.ContractBackend, _oracles []common.Address, _oraclesIP []string) (common.Address, *types.Transaction, *Orderbook, error) {
	parsed, err := OrderbookMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OrderbookBin), backend, _oracles, _oraclesIP)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Orderbook{OrderbookCaller: OrderbookCaller{contract: contract}, OrderbookTransactor: OrderbookTransactor{contract: contract}, OrderbookFilterer: OrderbookFilterer{contract: contract}}, nil
}

// Orderbook is an auto generated Go binding around an Ethereum contract.
type Orderbook struct {
	OrderbookCaller     // Read-only binding to the contract
	OrderbookTransactor // Write-only binding to the contract
	OrderbookFilterer   // Log filterer for contract events
}

// OrderbookCaller is an auto generated read-only Go binding around an Ethereum contract.
type OrderbookCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderbookTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OrderbookTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderbookFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OrderbookFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderbookSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OrderbookSession struct {
	Contract     *Orderbook        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OrderbookCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OrderbookCallerSession struct {
	Contract *OrderbookCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// OrderbookTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OrderbookTransactorSession struct {
	Contract     *OrderbookTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// OrderbookRaw is an auto generated low-level Go binding around an Ethereum contract.
type OrderbookRaw struct {
	Contract *Orderbook // Generic contract binding to access the raw methods on
}

// OrderbookCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OrderbookCallerRaw struct {
	Contract *OrderbookCaller // Generic read-only contract binding to access the raw methods on
}

// OrderbookTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OrderbookTransactorRaw struct {
	Contract *OrderbookTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOrderbook creates a new instance of Orderbook, bound to a specific deployed contract.
func NewOrderbook(address common.Address, backend bind.ContractBackend) (*Orderbook, error) {
	contract, err := bindOrderbook(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Orderbook{OrderbookCaller: OrderbookCaller{contract: contract}, OrderbookTransactor: OrderbookTransactor{contract: contract}, OrderbookFilterer: OrderbookFilterer{contract: contract}}, nil
}

// NewOrderbookCaller creates a new read-only instance of Orderbook, bound to a specific deployed contract.
func NewOrderbookCaller(address common.Address, caller bind.ContractCaller) (*OrderbookCaller, error) {
	contract, err := bindOrderbook(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OrderbookCaller{contract: contract}, nil
}

// NewOrderbookTransactor creates a new write-only instance of Orderbook, bound to a specific deployed contract.
func NewOrderbookTransactor(address common.Address, transactor bind.ContractTransactor) (*OrderbookTransactor, error) {
	contract, err := bindOrderbook(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OrderbookTransactor{contract: contract}, nil
}

// NewOrderbookFilterer creates a new log filterer instance of Orderbook, bound to a specific deployed contract.
func NewOrderbookFilterer(address common.Address, filterer bind.ContractFilterer) (*OrderbookFilterer, error) {
	contract, err := bindOrderbook(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OrderbookFilterer{contract: contract}, nil
}

// bindOrderbook binds a generic wrapper to an already deployed contract.
func bindOrderbook(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OrderbookABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Orderbook *OrderbookRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Orderbook.Contract.OrderbookCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Orderbook *OrderbookRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Orderbook.Contract.OrderbookTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Orderbook *OrderbookRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Orderbook.Contract.OrderbookTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Orderbook *OrderbookCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Orderbook.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Orderbook *OrderbookTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Orderbook.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Orderbook *OrderbookTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Orderbook.Contract.contract.Transact(opts, method, params...)
}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() view returns(address[], string[])
func (_Orderbook *OrderbookCaller) GetOracles(opts *bind.CallOpts) ([]common.Address, []string, error) {
	var out []interface{}
	err := _Orderbook.contract.Call(opts, &out, "getOracles")

	if err != nil {
		return *new([]common.Address), *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]string)).(*[]string)

	return out0, out1, err

}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() view returns(address[], string[])
func (_Orderbook *OrderbookSession) GetOracles() ([]common.Address, []string, error) {
	return _Orderbook.Contract.GetOracles(&_Orderbook.CallOpts)
}

// GetOracles is a free data retrieval call binding the contract method 0x40884c52.
//
// Solidity: function getOracles() view returns(address[], string[])
func (_Orderbook *OrderbookCallerSession) GetOracles() ([]common.Address, []string, error) {
	return _Orderbook.Contract.GetOracles(&_Orderbook.CallOpts)
}

// AddAsk is a paid mutator transaction binding the contract method 0x7e1b720d.
//
// Solidity: function addAsk(bytes _target, uint256 _askAmount, uint256 _askSize) returns()
func (_Orderbook *OrderbookTransactor) AddAsk(opts *bind.TransactOpts, _target []byte, _askAmount *big.Int, _askSize *big.Int) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "addAsk", _target, _askAmount, _askSize)
}

// AddAsk is a paid mutator transaction binding the contract method 0x7e1b720d.
//
// Solidity: function addAsk(bytes _target, uint256 _askAmount, uint256 _askSize) returns()
func (_Orderbook *OrderbookSession) AddAsk(_target []byte, _askAmount *big.Int, _askSize *big.Int) (*types.Transaction, error) {
	return _Orderbook.Contract.AddAsk(&_Orderbook.TransactOpts, _target, _askAmount, _askSize)
}

// AddAsk is a paid mutator transaction binding the contract method 0x7e1b720d.
//
// Solidity: function addAsk(bytes _target, uint256 _askAmount, uint256 _askSize) returns()
func (_Orderbook *OrderbookTransactorSession) AddAsk(_target []byte, _askAmount *big.Int, _askSize *big.Int) (*types.Transaction, error) {
	return _Orderbook.Contract.AddAsk(&_Orderbook.TransactOpts, _target, _askAmount, _askSize)
}

// AddBid is a paid mutator transaction binding the contract method 0x30df4b8c.
//
// Solidity: function addBid(address _oracleAddress, uint256 _bidAmount, uint256 _bidSize, string _dataCID) payable returns()
func (_Orderbook *OrderbookTransactor) AddBid(opts *bind.TransactOpts, _oracleAddress common.Address, _bidAmount *big.Int, _bidSize *big.Int, _dataCID string) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "addBid", _oracleAddress, _bidAmount, _bidSize, _dataCID)
}

// AddBid is a paid mutator transaction binding the contract method 0x30df4b8c.
//
// Solidity: function addBid(address _oracleAddress, uint256 _bidAmount, uint256 _bidSize, string _dataCID) payable returns()
func (_Orderbook *OrderbookSession) AddBid(_oracleAddress common.Address, _bidAmount *big.Int, _bidSize *big.Int, _dataCID string) (*types.Transaction, error) {
	return _Orderbook.Contract.AddBid(&_Orderbook.TransactOpts, _oracleAddress, _bidAmount, _bidSize, _dataCID)
}

// AddBid is a paid mutator transaction binding the contract method 0x30df4b8c.
//
// Solidity: function addBid(address _oracleAddress, uint256 _bidAmount, uint256 _bidSize, string _dataCID) payable returns()
func (_Orderbook *OrderbookTransactorSession) AddBid(_oracleAddress common.Address, _bidAmount *big.Int, _bidSize *big.Int, _dataCID string) (*types.Transaction, error) {
	return _Orderbook.Contract.AddBid(&_Orderbook.TransactOpts, _oracleAddress, _bidAmount, _bidSize, _dataCID)
}

// AskBounty is a paid mutator transaction binding the contract method 0xaa9f3d74.
//
// Solidity: function askBounty(bytes _orderId, uint64 _actorId) returns()
func (_Orderbook *OrderbookTransactor) AskBounty(opts *bind.TransactOpts, _orderId []byte, _actorId uint64) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "askBounty", _orderId, _actorId)
}

// AskBounty is a paid mutator transaction binding the contract method 0xaa9f3d74.
//
// Solidity: function askBounty(bytes _orderId, uint64 _actorId) returns()
func (_Orderbook *OrderbookSession) AskBounty(_orderId []byte, _actorId uint64) (*types.Transaction, error) {
	return _Orderbook.Contract.AskBounty(&_Orderbook.TransactOpts, _orderId, _actorId)
}

// AskBounty is a paid mutator transaction binding the contract method 0xaa9f3d74.
//
// Solidity: function askBounty(bytes _orderId, uint64 _actorId) returns()
func (_Orderbook *OrderbookTransactorSession) AskBounty(_orderId []byte, _actorId uint64) (*types.Transaction, error) {
	return _Orderbook.Contract.AskBounty(&_Orderbook.TransactOpts, _orderId, _actorId)
}

// ProveOrder is a paid mutator transaction binding the contract method 0x02c14739.
//
// Solidity: function proveOrder(bytes _orderId, uint256 _bidId, uint256 _askId, uint256 _amountFixed, uint256 _sizeFixed) returns()
func (_Orderbook *OrderbookTransactor) ProveOrder(opts *bind.TransactOpts, _orderId []byte, _bidId *big.Int, _askId *big.Int, _amountFixed *big.Int, _sizeFixed *big.Int) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "proveOrder", _orderId, _bidId, _askId, _amountFixed, _sizeFixed)
}

// ProveOrder is a paid mutator transaction binding the contract method 0x02c14739.
//
// Solidity: function proveOrder(bytes _orderId, uint256 _bidId, uint256 _askId, uint256 _amountFixed, uint256 _sizeFixed) returns()
func (_Orderbook *OrderbookSession) ProveOrder(_orderId []byte, _bidId *big.Int, _askId *big.Int, _amountFixed *big.Int, _sizeFixed *big.Int) (*types.Transaction, error) {
	return _Orderbook.Contract.ProveOrder(&_Orderbook.TransactOpts, _orderId, _bidId, _askId, _amountFixed, _sizeFixed)
}

// ProveOrder is a paid mutator transaction binding the contract method 0x02c14739.
//
// Solidity: function proveOrder(bytes _orderId, uint256 _bidId, uint256 _askId, uint256 _amountFixed, uint256 _sizeFixed) returns()
func (_Orderbook *OrderbookTransactorSession) ProveOrder(_orderId []byte, _bidId *big.Int, _askId *big.Int, _amountFixed *big.Int, _sizeFixed *big.Int) (*types.Transaction, error) {
	return _Orderbook.Contract.ProveOrder(&_Orderbook.TransactOpts, _orderId, _bidId, _askId, _amountFixed, _sizeFixed)
}

// RegisterOracle is a paid mutator transaction binding the contract method 0x5da6d08c.
//
// Solidity: function registerOracle(address _oracle, string _oracleIP) returns()
func (_Orderbook *OrderbookTransactor) RegisterOracle(opts *bind.TransactOpts, _oracle common.Address, _oracleIP string) (*types.Transaction, error) {
	return _Orderbook.contract.Transact(opts, "registerOracle", _oracle, _oracleIP)
}

// RegisterOracle is a paid mutator transaction binding the contract method 0x5da6d08c.
//
// Solidity: function registerOracle(address _oracle, string _oracleIP) returns()
func (_Orderbook *OrderbookSession) RegisterOracle(_oracle common.Address, _oracleIP string) (*types.Transaction, error) {
	return _Orderbook.Contract.RegisterOracle(&_Orderbook.TransactOpts, _oracle, _oracleIP)
}

// RegisterOracle is a paid mutator transaction binding the contract method 0x5da6d08c.
//
// Solidity: function registerOracle(address _oracle, string _oracleIP) returns()
func (_Orderbook *OrderbookTransactorSession) RegisterOracle(_oracle common.Address, _oracleIP string) (*types.Transaction, error) {
	return _Orderbook.Contract.RegisterOracle(&_Orderbook.TransactOpts, _oracle, _oracleIP)
}

// OrderbookNewAskEventIterator is returned from FilterNewAskEvent and is used to iterate over the raw logs and unpacked data for NewAskEvent events raised by the Orderbook contract.
type OrderbookNewAskEventIterator struct {
	Event *OrderbookNewAskEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderbookNewAskEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderbookNewAskEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderbookNewAskEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderbookNewAskEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderbookNewAskEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderbookNewAskEvent represents a NewAskEvent event raised by the Orderbook contract.
type OrderbookNewAskEvent struct {
	AskId     *big.Int
	Asker     common.Address
	AskAmount *big.Int
	AskSize   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewAskEvent is a free log retrieval operation binding the contract event 0x97cc68268dcbbd8d53f0ef5540d61904086eb90a195b0ae7605e7440c4c30008.
//
// Solidity: event NewAskEvent(uint256 askId, address asker, uint256 askAmount, uint256 askSize)
func (_Orderbook *OrderbookFilterer) FilterNewAskEvent(opts *bind.FilterOpts) (*OrderbookNewAskEventIterator, error) {

	logs, sub, err := _Orderbook.contract.FilterLogs(opts, "NewAskEvent")
	if err != nil {
		return nil, err
	}
	return &OrderbookNewAskEventIterator{contract: _Orderbook.contract, event: "NewAskEvent", logs: logs, sub: sub}, nil
}

// WatchNewAskEvent is a free log subscription operation binding the contract event 0x97cc68268dcbbd8d53f0ef5540d61904086eb90a195b0ae7605e7440c4c30008.
//
// Solidity: event NewAskEvent(uint256 askId, address asker, uint256 askAmount, uint256 askSize)
func (_Orderbook *OrderbookFilterer) WatchNewAskEvent(opts *bind.WatchOpts, sink chan<- *OrderbookNewAskEvent) (event.Subscription, error) {

	logs, sub, err := _Orderbook.contract.WatchLogs(opts, "NewAskEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderbookNewAskEvent)
				if err := _Orderbook.contract.UnpackLog(event, "NewAskEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewAskEvent is a log parse operation binding the contract event 0x97cc68268dcbbd8d53f0ef5540d61904086eb90a195b0ae7605e7440c4c30008.
//
// Solidity: event NewAskEvent(uint256 askId, address asker, uint256 askAmount, uint256 askSize)
func (_Orderbook *OrderbookFilterer) ParseNewAskEvent(log types.Log) (*OrderbookNewAskEvent, error) {
	event := new(OrderbookNewAskEvent)
	if err := _Orderbook.contract.UnpackLog(event, "NewAskEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderbookNewBidEventIterator is returned from FilterNewBidEvent and is used to iterate over the raw logs and unpacked data for NewBidEvent events raised by the Orderbook contract.
type OrderbookNewBidEventIterator struct {
	Event *OrderbookNewBidEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderbookNewBidEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderbookNewBidEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderbookNewBidEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderbookNewBidEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderbookNewBidEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderbookNewBidEvent represents a NewBidEvent event raised by the Orderbook contract.
type OrderbookNewBidEvent struct {
	BidId     *big.Int
	Bidder    common.Address
	BidAmount *big.Int
	BidSize   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewBidEvent is a free log retrieval operation binding the contract event 0x993273aba8f3ffa2f322e415e681892c5b94cdf8567fcf1f0ebe13dc28fa655a.
//
// Solidity: event NewBidEvent(uint256 bidId, address bidder, uint256 bidAmount, uint256 bidSize)
func (_Orderbook *OrderbookFilterer) FilterNewBidEvent(opts *bind.FilterOpts) (*OrderbookNewBidEventIterator, error) {

	logs, sub, err := _Orderbook.contract.FilterLogs(opts, "NewBidEvent")
	if err != nil {
		return nil, err
	}
	return &OrderbookNewBidEventIterator{contract: _Orderbook.contract, event: "NewBidEvent", logs: logs, sub: sub}, nil
}

// WatchNewBidEvent is a free log subscription operation binding the contract event 0x993273aba8f3ffa2f322e415e681892c5b94cdf8567fcf1f0ebe13dc28fa655a.
//
// Solidity: event NewBidEvent(uint256 bidId, address bidder, uint256 bidAmount, uint256 bidSize)
func (_Orderbook *OrderbookFilterer) WatchNewBidEvent(opts *bind.WatchOpts, sink chan<- *OrderbookNewBidEvent) (event.Subscription, error) {

	logs, sub, err := _Orderbook.contract.WatchLogs(opts, "NewBidEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderbookNewBidEvent)
				if err := _Orderbook.contract.UnpackLog(event, "NewBidEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewBidEvent is a log parse operation binding the contract event 0x993273aba8f3ffa2f322e415e681892c5b94cdf8567fcf1f0ebe13dc28fa655a.
//
// Solidity: event NewBidEvent(uint256 bidId, address bidder, uint256 bidAmount, uint256 bidSize)
func (_Orderbook *OrderbookFilterer) ParseNewBidEvent(log types.Log) (*OrderbookNewBidEvent, error) {
	event := new(OrderbookNewBidEvent)
	if err := _Orderbook.contract.UnpackLog(event, "NewBidEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderbookOrderCreatedEventIterator is returned from FilterOrderCreatedEvent and is used to iterate over the raw logs and unpacked data for OrderCreatedEvent events raised by the Orderbook contract.
type OrderbookOrderCreatedEventIterator struct {
	Event *OrderbookOrderCreatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderbookOrderCreatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderbookOrderCreatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderbookOrderCreatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderbookOrderCreatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderbookOrderCreatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderbookOrderCreatedEvent represents a OrderCreatedEvent event raised by the Orderbook contract.
type OrderbookOrderCreatedEvent struct {
	OrderId       []byte
	BidId         *big.Int
	Bidder        common.Address
	AskId         *big.Int
	Asker         common.Address
	OracleAddress common.Address
	DataCID       string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOrderCreatedEvent is a free log retrieval operation binding the contract event 0x86e6d0e88a5f307fadca96a6dc3f153a03dbb6f7b7ae260489df2efd95a7a33e.
//
// Solidity: event orderCreatedEvent(bytes orderId, uint256 bidId, address bidder, uint256 askId, address asker, address oracleAddress, string dataCID)
func (_Orderbook *OrderbookFilterer) FilterOrderCreatedEvent(opts *bind.FilterOpts) (*OrderbookOrderCreatedEventIterator, error) {

	logs, sub, err := _Orderbook.contract.FilterLogs(opts, "orderCreatedEvent")
	if err != nil {
		return nil, err
	}
	return &OrderbookOrderCreatedEventIterator{contract: _Orderbook.contract, event: "orderCreatedEvent", logs: logs, sub: sub}, nil
}

// WatchOrderCreatedEvent is a free log subscription operation binding the contract event 0x86e6d0e88a5f307fadca96a6dc3f153a03dbb6f7b7ae260489df2efd95a7a33e.
//
// Solidity: event orderCreatedEvent(bytes orderId, uint256 bidId, address bidder, uint256 askId, address asker, address oracleAddress, string dataCID)
func (_Orderbook *OrderbookFilterer) WatchOrderCreatedEvent(opts *bind.WatchOpts, sink chan<- *OrderbookOrderCreatedEvent) (event.Subscription, error) {

	logs, sub, err := _Orderbook.contract.WatchLogs(opts, "orderCreatedEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderbookOrderCreatedEvent)
				if err := _Orderbook.contract.UnpackLog(event, "orderCreatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCreatedEvent is a log parse operation binding the contract event 0x86e6d0e88a5f307fadca96a6dc3f153a03dbb6f7b7ae260489df2efd95a7a33e.
//
// Solidity: event orderCreatedEvent(bytes orderId, uint256 bidId, address bidder, uint256 askId, address asker, address oracleAddress, string dataCID)
func (_Orderbook *OrderbookFilterer) ParseOrderCreatedEvent(log types.Log) (*OrderbookOrderCreatedEvent, error) {
	event := new(OrderbookOrderCreatedEvent)
	if err := _Orderbook.contract.UnpackLog(event, "orderCreatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
